
import re
import pprint

#import integralstor
#from integralstor import command, disks
#from integralstor 
import command, disks

def get_single_line_value(lines, property_name):
  """Given a property in the form of 'property_name: property_value' return the value of the property"""

  retval = None
  try:
    if not lines:
      raise Exception("No lines provided!")
    if '%s:'%property_name not in lines[0]:
      raise Exception("%s not found in the line provided!"%property_name)
    parts = lines[0].split()
    if not parts or len(parts) < 2:
      raise Exception("%s not found in the line provided!"%property_name)
    retval = parts[1]
  except Exception, e:
    return None, 'Error getting the single line value : %s'%str(e)
  else:
    return retval, None


def get_multi_line_value(lines, property_name):
  """Given a property in the form of 'property_name: property_value' followed by more lines in the list it returns the value of the property in the form of a string consisting of all following lines in the list """

  retval = None
  try:
    if not lines or '%s:'%property_name not in lines[0]:
      raise Exception("%s not found in the line provided!"%property_name)
    str = ""
    for line in lines:
      res = re.match('^%s:\s*([\s\S]+)'%property_name, line.strip())
      if res:
        str += res.groups()[0]
      else:
        str.append(line.strip())
    retval = str
  except Exception, e:
    return None, 'Error getting the multi line value : %s'%str(e)
  else:
    return retval, None


def get_config_line_details(line):
  """ Given a pool component configuration line, return a dict with each of its components"""

  d = None
  try:
    parts = line.split()
    if not parts:
      return None
    d = {}
    d['name'] = parts[0]
    if 'raidz1' in d['name']:
      d['type'] = 'raidz1'
    elif 'logs' in d['name']:
      d['type'] = 'logs'
    elif 'cache' in d['name']:
      d['type'] = 'cache'
    elif 'raidz2' in d['name']:
      d['type'] = 'raidz2'
    elif 'mirror' in d['name']:
      d['type'] = 'mirror'
    else:
      d['type'] = 'device'
    if d['type'] not in ['cache', 'logs']:
      d['state'] = parts[1]
      d['read'] = int(parts[2])
      d['write'] = int(parts[3])
      d['chksum'] = int(parts[4])
  except Exception, e:
    return None, 'Error getting config line details : %s'%str(e)
  else:
    return d, None



def process_config_section(lines):
  """Given a list of lines for a config section, return a dict of each of its components along with their children consitituents and the root of the tree"""
  nodes = {}
  root = None
  try:
    stack = []
    if not lines:
      return None
    prev_node = None
    curr_spaces = -1
    d = None

    for line in lines:
      if d:
        prev_node = d
      d, err = get_config_line_details(line)
      if not d:
        errstr = "Error getting config line details for line : %s."%line
        if err:
          errstr += "Error : %s"%err
        raise Exception(errstr)
      prev_spaces = curr_spaces
      curr_spaces = len(line.rstrip()) - len(line.rstrip().lstrip())
      if curr_spaces > prev_spaces:
        if prev_node:
          stack.append(prev_node)
      elif curr_spaces < prev_spaces:
        stack.pop()
      if stack:
        parent = stack[len(stack)-1]
        d['parent'] = parent['name']
        if "children" not in parent:
          parent['children'] = []
        parent['children'].append(d['name'])
      else:
        d['parent'] = None
        root = d['name']
      nodes[d['name']] = d

    if nodes[root]['name'] not in ['cache', 'logs']:
      nodes[root]['type'] = 'pool'

    #pp = pprint.PrettyPrinter(indent=4)
    #pp.pprint( nodes)
  except Exception, e:
    return None, None, 'Error processing the configuration section : %s'%str(e)
  else:
    return nodes, root, None


def process_pool_config(lines):
  """Process the complete config section of the zpool status command and return a dict for each of pool, cache and logs sections"""
  return_dict = {}
  try:
    if not lines:
      raise Exception("No lines passed!")
    if 'config:' not in lines[0]:
      raise Exception("No config section found!")
    start_processing = False
    base_space_count = -1
    component_lines = []
    processing = None
    d = {}
    for line in lines:
      res = re.match('^NAME[\s]*STATE[\s]*READ[\s]*WRITE[\s]*CKSUM', line.strip())
      if res:
        start_processing = True
        base_space_count = len(line.rstrip()) - len(line.rstrip().lstrip())
        #print base_space_count
        continue
      elif not start_processing:
        continue
      space_count = len(line.rstrip()) - len(line.rstrip().lstrip())
      if space_count == base_space_count:
        #Has to be a pool line, logs line or cache line
        if component_lines:
          if processing == 'cache':
            d['cache'] = component_lines
          elif processing == 'logs':
            d['logs'] = component_lines
          else :
            d['pool'] = component_lines
          component_lines = []
          if line.strip() == 'cache':
            processing = 'cache'
          elif line.strip() == 'logs':
            processing = 'logs'
          else:
            processing = 'pool'
      component_lines.append(line)
    if component_lines:
      d[processing] = component_lines

    # We have now split the lines up into 3 sections so process each section

    if 'logs' in d:
      temp, root, err = process_config_section(d['logs'])
      if not temp:
        errstr = "Error retrieving logs config section"
        if err:
          errstr += err
        raise Exception(errstr)        
      return_dict['logs'] = {}
      return_dict['logs']['components'] = temp
      return_dict['logs']['_root'] = root
    else:
      return_dict['logs'] = None

    if 'cache' in d:
      temp, root, err = process_config_section(d['cache'])
      if not temp:
        errstr = "Error retrieving cache config section"
        if err:
          errstr += err
        raise Exception(errstr)        
      return_dict['cache'] = {}
      return_dict['cache']['components'] = temp
      return_dict['cache']['_root'] = root
    else:
      return_dict['cache'] = None

    temp, root, err = process_config_section(d['pool'])
    if not temp:
      errstr = "Error retrieving pool config section"
      if err:
        errstr += err
      raise Exception(errstr)        
    return_dict['pool'] = {}
    return_dict['pool']['components'] = temp
    return_dict['pool']['_root'] = root

    #pp = pprint.PrettyPrinter(indent=4)
    #pp.pprint(return_dict)

  except Exception, e:
    return None, "Error processing the pool's config section : %s"%str(e)
  else:
    return return_dict, None



def process_pool(lines):
  """Given a list of lines corresponding to one pool, process it and return a dict with all its info"""

  return_dict = {}
  try:
    processing = None
    tmp_list = []
    dict = {}
    for line in lines:
      if 'state:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'state'
        #print 'Processing state'
      elif 'status:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'status'
        #print 'Processing status'
      elif 'pool:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'pool'
        #print 'Processing status'
      elif 'scan:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'scan'
      #print 'Processing scan'
      elif 'action:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'action'
        #print 'Processing action'
      elif 'see:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'see'
        #print 'Processing see'
      elif 'scrub:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'scrub'
        #print 'Processing scrub'
      elif 'errors:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'errors'
        #print 'Processing errors'
      elif 'config:' in line.strip():
        if processing and tmp_list:
          dict[processing] = tmp_list
        tmp_list = []
        processing = 'config'
        #print 'Processing config'
      #print line
      tmp_list.append(line)
    if processing and tmp_list:
      dict[processing] = tmp_list
    
  
    #print 'pool name is ' + get_single_line_value(dict['pool'], 'pool')
    #print 'state is ' + get_single_line_value(dict['state'], 'state')
    #print 'errors is ' + get_multi_line_value(dict['errors'], 'errors')
    #print 'scan is ' + get_multi_line_value(dict['scan'], 'scan')
  
    temp, err = get_single_line_value(dict['pool'], 'pool')
    if not temp:
      errstr = 'Error getting pool name.'
      if err:
        errstr += errstr
      raise Exception(errstr)
    return_dict['pool_name'] = temp


    temp, err = get_single_line_value(dict['state'], 'state')
    if not temp:
      errstr = 'Error getting pool state.'
      if err:
        errstr += errstr
      raise Exception(errstr)
    return_dict['state'] = temp

    temp, err = get_multi_line_value(dict['errors'], 'errors')
    if not temp:
      errstr = 'Error getting pool errors.'
      if err:
        errstr += err
      raise Exception(errstr)
    return_dict['errors'] = temp

    temp, err = get_multi_line_value(dict['scan'], 'scan')
    if not temp:
      errstr = 'Error getting pool scan results.'
      if err:
        errstr += err
      raise Exception(errstr)
    return_dict['scan'] = temp

    temp, err = process_pool_config(dict['config'])
    if not temp:
      errstr = 'Error getting pool configuration.'
      if err:
        errstr += err
      raise Exception(errstr)
    return_dict['config'] = temp

    #pp = pprint.PrettyPrinter(indent=4)
    #pp.pprint(return_dict)


  except Exception, e:
    return None, 'Error processing pool configuration : %s'%str(e)
  else:
    return return_dict, None


def get_pools():
  pools = []
  try:
    cmd = '/sbin/zpool status'
    ret, rc = command.execute_with_rc(cmd)
    if rc == 0:
      lines = command.get_output_list(ret)
    '''
    with open('zfsout', 'r') as f:
      lines = f.readlines()
    '''
    
    pool_lines = []
    processed = False
    pl = []
    for line in lines:
      if not line.strip():
        continue
      if 'pool:' in line:
        #New pool encountered so start a new list
        if pl:
          pool_lines.append(pl)
          pl = []
      pl.append(line)
    if pl:
      pool_lines.append(pl)

    for l in pool_lines:
      d, err = process_pool(l)
      if not d:
        errstr = "Error processing a pool : "
        if err:
          errstr += err
        raise Exception(errstr)
      pools.append(d)
  except Exception, e:
    return None, "Error processing zfs pool information : %s"%str(e)
  else:
    return pools, None

def get_free_disks():

  free_disks = []
  try:
    pools, err = process_all_pools()
    if not pools:
      errstr = "Error getting pools information : "
      if err:
        errstr += err
      raise Exception(errstr)

    all_disks, err = disks.get_disk_info_all()
    if not all_disks:
      errstr = "Error getting disk information : "
      if err:
        errstr += err
      raise Exception(errstr)
    #print all_disks

    disk_id_list = []
    for sn, disk in all_disks.items():
      if 'id' in disk:
        disk_id_list.append(disk['id'])
    #print disk_id_list

    free_disk_ids = []
    used_disks = []
    for pool in pools:
      if 'config' not in pool:
        continue
      for cname, component in pool['config'].items():
        if not component:
          continue
        for scname, subcomponent in component.items():
          if not subcomponent:
            continue
          if 'type' not in subcomponent:
            continue
          if subcomponent['type'] == 'device':
            used_disks.append(subcomponent['name'])

    for disk_id in disk_id_list:
      if disk_id not in used_disks:
        free_disk_ids.append(disk_id)

    if free_disk_ids:
      for sn, disk in all_disks.items():
        if 'boot_device' in disk:
          continue
        if disk['id'] in free_disk_ids:
          free_disks.append(disk)
  except Exception, e:
    return None, "Error getting free disks : %s"%str(e)
  else:
    return free_disks, None
    
'''
'''

def main():
  d, err = get_pools()
  #d, err = get_free_disks()
  if err:
    print err
  else:
    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(d)
if __name__ == '__main__':
  main()
