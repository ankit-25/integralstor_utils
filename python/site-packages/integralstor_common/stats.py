
import json, pprint, os, shutil
from datetime import date, timedelta

sar_dir_path = '/var/log/sysstat'

def get_system_stats():
  ''' Process all the sadf stats for a node '''
  l = []
  try:
    d, err = load_stats()
    if not d:
      err =  "Error getting system statistics : %s"%err
      return None, err
    if 'sysstat' not in d or 'hosts' not in d['sysstat'] :
      err =  "Error getting system statistics : No statistics available for any host."
      return None, err
    for host in d['sysstat']['hosts']:
      d, err = process_host(host)
      if d:
        l.append(d)
      else:
        raise Exception('Error getting statistics for host %s : %s'%(host['nodename'], err))
  except Exception, e:
    return None, 'Error processing system statistics : %s'%str(e)
  else:
    return l, None

def process_host(id):
  ''' Given a dict section of the sadf output, return a dict with a key for each stat type '''

  if 'statistics' not in id:
    return None, 'No statistics found!'
  try:
    d = {}
    d['cpu-load'] = []
    d['memory'] = []
    d['queue'] = []
    d['disk'] = {}
    d['network'] = {}
  
    when = {}
    for stat in id['statistics']:
      when = stat['timestamp']
  
      td = {}
      td['time'] = when
      td['data'] = stat['cpu-load']
      d['cpu-load'].append(td)
  
      td = {}
      td['time'] = when
      td['data'] = stat['memory']
      d['memory'].append(td)
  
      td = {}
      td['time'] = when
      td['data'] = stat['queue']
      d['queue'].append(td)
  
      if 'disk' in stat:
        for device in stat['disk']:
          td = {}
          td['time'] = when
          td['data'] = device
          if not device['disk-device'] in d['disk']:
            d['disk'][device['disk-device']] = []
          d['disk'][device['disk-device']].append(td)
  
      if 'network' in stat and 'net-dev' in stat['network']:
        for iface in stat['network']['net-dev']:
          td = {}
          td['time'] = when
          td['data'] = iface
          if not iface['iface'] in d['network']:
            d['network'][iface['iface']] = []
          d['network'][iface['iface']].append(td)
  except Exception, e:
    return None, "Error processing the host's statistics : %s"%str(e)
  else:
    return d, None


def load_stats():
  ''' Load the sar stats from the appropriate directory '''
  d = None
  try :
    with open('a.json', 'r') as f:
      d = json.load(f)
  except Exception, e:
    return None, "Error loading system stats : %s"%str(e)
  else:
    return d, None

def backup_sa_file():
  ''' Utility function to be called from cron to back up previous days sar file '''
  yesterday = date.today() - timedelta(1)
  yesterday_date = yesterday.strftime('%d')
  if os.path.isfile('%s/sa%s'%(sar_dir_path, yesterday_date)):
    print "Found file for yesterday : %s/sa%s"%(sar_dir_path, yesterday_date)
    shutil.copyfile('%s/sa%s'%(sar_dir_path, yesterday_date), '/home/bkrram/sa%s'%yesterday.strftime('%m%d%y'))
  else:
    print 'oops. not there'

def main():
  d, err = get_system_stats()
  if not d:
    print "Could not get system statistics : %s"%err
  else:
    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(d)
  '''
  backup_sa_file()
  '''

if __name__ == '__main__':
  main()
