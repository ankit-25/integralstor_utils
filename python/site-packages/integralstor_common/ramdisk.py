import command
import os, shutil

def get_mem_stats(units):

  mem = None
  
  try:
    if units not in ['MB', 'GB']:
      raise Exception('Incorrect units requested')
    if not units:
      raise Exception('Units not specified in request')
    if units == 'MB':
      flag = '-m'
    elif units == 'GB':
      flag = '-g'
    cmd = 'free %s'%flag
    lines = None
    ret, rc = command.execute_with_rc(cmd)
    if rc == 0:
      lines = command.get_output_list(ret)
    else:
      err = ''
      tl = command.get_output_list(ret)
      if tl:
        err = ','.join(tl)
      tl = command.get_error_list(ret)
      if tl:
        err = err + ','.join(tl)
      raise Exception('Error getting free memory: %s'%err)

    if lines:
      for line in lines:
        if 'Mem:' not in line:
          continue
        components = line.split()
        mem = {}
        mem['total'] = float(components[1])
        mem['used'] = float(components[2])
        mem['free'] = float(components[3])
  except Exception, e:
    return None, 'Error retriving free memory : %s'%str(e)
  else:
    return mem, None

def get_ramdisks_config():
  ramdisks = []
  try:
    lines = None
    with open('/tmp/ramdisks', 'r') as f:
      lines = f.readlines()
    if lines:
      for line in lines:
        components = line.split()
        if len(components) < 2:
          raise Exception('Invalid ramdisk format')
        r = {}
        r['pool'] = components[0]
        r['size'] = float(components[1])
        ramdisks.append(r)
        
  except Exception, e:
    return None, 'Error getting existing ramdisk info: %s'%str(e)
  else:
    return ramdisks, None

def get_total_ramdisks_size():
  size = 0
  try:
    ramdisks, err = get_ramdisks_config()
    if not ramdisks :
      if err:
        raise Exception(err)
      else:
        size = 0
    else:
      for r in ramdisks:
        size += r['size']  
      
  except Exception, e:
    return -1, 'Error creating ramdisk : %s'%str(e)
  else:
    return size, None

def insert_into_ramdisks_config(name, size):
  try:
    with open('/tmp/ramdisks', 'a') as f:
      f.write('%s %s\n'%(name, size))
      f.flush()
  except Exception, e:
    return False, 'Error updating ramdisk config info: %s'%str(e)
  else:
    return True, None

def remove_from_ramdisks_config(name):
  try:
    ramdisks, err = get_ramdisks_config()
    if ramdisks:
      new_ramdisks = []
      for r in ramdisks:
        if r['pool'] != name:
          new_ramdisks.append(r)
      with open('/tmp/tmpramdisks', 'w') as f:
        for r in new_ramdisks:
          f.write('%s %s\n'%(r['pool'], r['size']))
          f.flush()
      shutil.move('/tmp/tmpramdisks', '/tmp/ramdisks')
    else: 
      raise Exception ('Specified ramdisk not found')
        
  except Exception, e:
    return None, 'Error removing ramdisk : %s'%str(e)
  else:
    return ramdisks, None

def get_ramdisk_info(name):
  d = None
  try:
    ramdisks, err = get_ramdisks_config()
    if not ramdisks:
      if err:
        raise Exception('Error retrieving ramdisk config : %s'%str)
      else:
        d = None
    else:
      for r in ramdisks:
        if r['pool'] == name:
          d = r
          break
  except Exception, e:
    return None, 'Error getting ramdisk info : %s'%str(e)
  else:
    return d, None

def create_ramdisk(size, name):
  try:
    if not size :
      raise Exception ('Size not specified')

    mem, err = get_mem_stats('MB')
    if not mem:
      raise Exception('Error getting memory information : %s'%err)

    used, err = get_total_ramdisks_size()
    if used < 0:
      raise Exception(err)

    if (used + size)/mem['total'] > 0.25:
      raise Exception('Insufficient memory ')

    path = '/mnt/ramdisk_%s'%name
    if not os.path.exists(path): 
      os.makedirs(path)
    cmd = 'mount -t tmpfs -o size=%dm tmpfs %s'%(size, path)
    ret, rc = command.execute_with_rc(cmd)
    if rc == 0:
      lines = command.get_output_list(ret)
    else:
      err = ''
      tl = command.get_output_list(ret)
      if tl:
        err = ','.join(tl)
      tl = command.get_error_list(ret)
      if tl:
        err = err + ','.join(tl)
      raise Exception('Error creating ramdisk : %s'%err)

    cmd = 'dd if=/dev/zero of=/mnt/ramdisk_%s/ramfile bs=1024 count=%dK'%(name, size)
    ret, rc = command.execute_with_rc(cmd)
    if rc == 0:
      lines = command.get_output_list(ret)
    else:
      err = ''
      tl = command.get_output_list(ret)
      if tl:
        err = ','.join(tl)
      tl = command.get_error_list(ret)
      if tl:
        err = err + ','.join(tl)
      raise Exception('Error initializing ramdisk : %s'%err)

    res, err = insert_into_ramdisks_config(name, size)
    if not res:
      cmd = 'umount %s'%path
      ret, rc = command.execute_with_rc(cmd)
      if rc == 0:
        lines = command.get_output_list(ret)
      else:
        err1 = ''
        tl = command.get_output_list(ret)
        if tl:
          err1 = ','.join(tl)
        tl = command.get_error_list(ret)
        if tl:
          err1 = err1 + ','.join(tl)
        err += ' '
        err += err1
      raise Exception(err)
      
  except Exception, e:
    return False, 'Error creating ramdisk : %s'%str(e)
  else:
    return True, None

def destroy_ramdisk(name):
  try:
    path = '/mnt/%s'%name
    res, err = remove_from_ramdisks_config(name)
    if not res:
      if err:
        raise Exception(err)
      else:
        raise Exception("Error removing ramdisk info from the conf file")
    cmd = 'umount %s'%path
    ret, rc = command.execute_with_rc(cmd)
    if rc == 0:
      lines = command.get_output_list(ret)
    else:
      err = ''
      tl = command.get_output_list(ret)
      if tl:
        err = ','.join(tl)
      tl = command.get_error_list(ret)
      if tl:
        err = err + ','.join(tl)
      raise Exception('Error unmounting ramdisk : %s'%err)
  except Exception, e:
    return False, 'Error destroying ramdisk : %s'%str(e)
  else:
    return True, None

def main():
  #print get_mem_stats('MB')
  #print get_ramdisks_info()
  #print create_ramdisk(2, 'ramdisk1')
  #raw_input('press to continue')
  print destroy_ramdisk('ramdisk1')

if __name__ == '__main__':
  main()
