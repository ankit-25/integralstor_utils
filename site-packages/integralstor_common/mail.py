
import smtplib, email.utils
from email.mime.text import MIMEText

from integralstor_common import common, db

"""
Load email settings from the db. Email configuration is stored in the db. All settings are got and stored there.
"""
def load_email_settings():
  conn = None
  d = None
  try :
    db_path, err = common.get_db_path()
    if err:
      raise Exception(err)
    d, err = db.read_single_row(db_path, "select * from email_config where id = 1")
    if err:
      raise Exception(err)
  except Exception, e:
    return None, 'Error loading email settings : %s'%str(e)
  else:
    return d, None
  finally:
    if conn:
      conn.close()

"""
Save email config settings to the db
"""
def save_email_settings(d):
  conn = None
  try :
    db_path, err = common.get_db_path()
    if err:
      raise Exception(err)

    if 'tls' not in d:
      d['tls'] = False
    if 'email_alerts' not in d:
      d['email_alerts'] = False

    d1, err = db.read_single_row(db_path, "select * from email_config")

    if err:
      raise Exception(err)
    if d1:
      #Config exists so update
      ret, err = db.execute_iud(db_path, [["update email_config set server=?, port=?, username=?, pswd=?, tls=?, email_alerts=?, rcpt_list=? where id = ?", (d["email_server"], d["email_server_port"], d["username"], d["pswd"], d["tls"], d["email_alerts"], d["rcpt_list"], 1,)]])
      if err:
        raise Exception(err)
    else:
      #No config exists so insert
      ret, err = db.execute_iud(db_path, [["insert into email_config (server, port, username, pswd, tls, email_alerts, rcpt_list, id) values (?,?,?,?,?,?,?,?)", (d["email_server"], d["email_server_port"], d["username"], d["pswd"], d["tls"], d["email_alerts"], d["rcpt_list"],1, )]])
      if err:
        raise Exception(err)
  except Exception, e:
    return False, 'Error saving email settings : %s'%str(e)
  else:
    return True, None

"""
Remove all email config settings from the db
"""
def delete_email_settings():
  try :
    db_path, err = common.get_db_path()
    if err:
      raise Exception(err)
    ret, err = db.execute_iud(["delete from  email_config "])
    if err:
      raise Exception(err)

  except Exception, e:
    return False, 'Error deleting email settings : %s'%str(e)
  else:
    return True, None

"""
Send an email using the configuration parameters supplied.
"""
def send_mail(server, port, username, pswd, tls, rcpt_list, header, body):

  ms = None
  try:
    msg = MIMEText(body)
    msg.set_unixfrom('Integralstor Alerting System')
    if ',' in rcpt_list:
      emails = rcpt_list.split(',')
    else:
      emails = rcpt_list.split(' ')
    to = ','.join(emails)
    msg['From'] = email.utils.formataddr(('IntegralView alerting system', "%s@%s"%(username, server)))
    msg['Subject'] = header
    #print "Sending msg with header \'%s\' and body\' %s\' to %s"%(header, body, emails)

    #print "Opening connection to %s %d"%(server.strip(), port)
    ms = smtplib.SMTP(server, port)
    #print "Opened connection"
    ms.set_debuglevel(True)
    ms.ehlo()
    if tls:
      if ms.has_extn('STARTTLS'):
        ms.starttls()
        ms.ehlo()
    ms.login(username, pswd)
    ms.sendmail('%s@%s'%(username, server), emails, msg.as_string())
  except Exception, e:
    return False, 'Error sending email : %s'%str(e)
  else:
    return True, None
  finally:
    if ms:
      ms.quit()

def main():
  #print "deleting"
  #d = delete_email_settings()
  #d = load_email_settings()
  #print d
  #print "creating"
  #save_email_settings({"server":"new", "port":22, "username":"newuser", "pswd":"newpass", "tls":True, "email_alerts":False, "rcpt_list":"1@1.com, 2@2.com"})
  #print "created"
  #d = load_email_settings()
  #print d
  #if d["tls"]:
  #  print "tls true"
  #if d["email_alerts"]:
  #  print "email_alerts true"
  #print "updating"
  #save_email_settings({"server":"new1", "port":23, "username":"newuser1", "pswd":"newpass1", "tls":False, "email_alerts":True, "rcpt_list":"11@1.com, 12@2.com"})
  #print "updated"
  #d = load_email_settings()
  #print d
  #if d["tls"]:
  #  print "tls true"
  #if d["email_alerts"]:
  #  print "email_alerts true"
  #print "deleting"
  #d = delete_email_settings()
  #d = load_email_settings()
  #print d
  #send_mail("testhdr", "testbdy")
  pass

if __name__== "__main__":
    main()

