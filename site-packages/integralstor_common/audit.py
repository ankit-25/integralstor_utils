
import time, os, os.path, re, urllib, urllib2

from integralstor_common import file_processing, common, logs

def batch_audit(audit_action, audit_str):
  try:
    url_host, err = common.get_audit_url_host()
    if err:
      raise Exception(err)
    url_component, err = common.get_audit_url_component()
    if err:
      raise Exception(err)
    audit_url = "%s/%s/"%(url_host, url_component)
    data = urllib.urlencode({'who' : 'batch',
                            'audit_action':audit_action,
                           'audit_str'  : audit_str})
    content = urllib2.urlopen(url=audit_url, data=data).read()
  except Exception, e:
    return False, 'Error performing a batch audit operation : %s'%str(e)
  else:
    return True, None



def audit(audit_action, audit_str, ip):

  try:
    audit_file, err = _get_audit_file_path()
    if err:
      raise Exception(err)
    t = int(time.time())
    d = {}
    d["time"] = t
    d["audit_str"] = audit_str
    d["audit_action"] = audit_action
    with open(audit_file, "a") as f:
      f.write("%-13d %-16s %-25s %-45s\n"%(t, ip, audit_action, audit_str))
      f.flush()
    f.close()
  except Exception, e:
    return False, 'Error performing an audit operation : %s'%str(e)
  else:
    return True, None


def get_lines(file_name = None):
  #Return all the lines from the audit file as a list of dictionaries
  al = []
  try:
    err = None
    audit_dir, err = common.get_audit_dir()
    if err:
      raise Exception(err)
    if not file_name:
      fname, err = _get_audit_file_path()
    else:
      fname = "%s/%s"%(audit_dir, file_name)
    if err:
      raise Exception(err)

    if not fname:
      raise Exception("Could not get audit file name.")
    if fname:
      with open(fname, "r") as f:
        for line in file_processing.reversed_lines(f):
          d, err = _parse_audit_line(line)
          if err:
            raise Exception(err)
          al.append(d)
  except Exception, e:
    return None, 'Error loading audit lines : %s'%str(e)
  else:
    return al, None


def _get_audit_file_path():
# Return the audit file path. Create the audit directory and file if it does not exist

  audit_file = None
  try:
    audit_dir, err = common.get_audit_dir()
    if err:
      raise Exception(err)
    if not os.path.exists(audit_dir):
      try:
        os.mkdir(audit_dir)
      except OSError:
        return None

    audit_file = os.path.normpath("%s/audit.log"%audit_dir)
    if not os.path.exists(audit_file):
      mode = "w"
      #Create if it does not exist
      f = open(audit_file, mode)
      f.close()
    else:
      mode = "a"
  except Exception, e:
    return None, 'Error getting audit log path : %s'%str(e)
  else:
    return audit_file, None



def _parse_audit_line(str):
  try:
    gridcell_action_dict = { "create_volume":"Volume creation",
                    "expand_volume":"Volume expansion", 
                    "vol_start":"Volume start", 
                    "set_vol_options":"Set volume option", 
                    "vol_stop":"Volume stop", 
                    "vol_rebalance_start":"Start volume rebalance", 
                    "rebalance_start":"Start volume rebalance", 
                    "vol_rebalance_stop":"Stop volume rebalance", 
                    "volume_heal_full":"Volume data heal", 
                    "log_rotate":"Rotate volume log", 
                    "replace_node":"Replace GRIDCell", 
                    "add_storage":"Add storage", 
                    "add_brick":"Add volume component", 
                    "remove_brick_start":"Remove volume component", 
                    "remove_brick_commit":"Remove volume component commit", 
                    "replace_brick_commit":"Replace volume component", 
                    "remove_storage":"Remove storage", 
                    "modify_user":"Modify Samba user", 
                    "create_user":"Create user", 
                    "modify_share":"Modify a share", 
                    "delete_share":"Delete a share", 
                    "modify_admin_password":"Modify admin password", 
                    "create_share":"Create a share", 
                    "modify_samba_server_security":"Modify Samba server security settings", 
                    "modify_samba_settings":"Modify share authentication settings", 
                    "modify_samba_server_basic":"Modify Samba server basic settings"
                  }
    unicell_action_dict = {
    "modify_local_user_gid":"Local user's primary group set",
    "modify_local_user_grp_membership":"Local user's group membership modified",
    "create_local_user":"Local user created",
    "create_local_group":"Local group created",
    "delete_local_group":"Local group removed",
    "delete_local_user":"Local user removed",
    "change_local_user_password":"Local user password modified",
    "modify_dir_owner_permissions":"Directory ownership/permissions modified",
    "modify_cifs_share":"CIFS share modified",
    "delete_cifs_share":"CIFS share removed",
    "create_cifs_share":"CIFS share created",
    "modify_samba_settings":"CIFS authentication settings modified",
    "delete_nfs_share":"NFS share removed",
    "edit_nfs_share":"NFS share modified",
    "create_nfs_share":"NFS share created",
    "create_iscsi_target":"ISCSI target created",
    "delete_iscsi_target": "ISCSI target removed",
    "create_iscsi_lun":"ISCSI LUN created",
    "delete_iscsi_lun":"ISCSI LUN removed",
    "add_iscsi_target_authentication":"ISCSI target authentication added",
    "remove_iscsi_target_authentication":"ISCSI target authentication removed",
    "add_iscsi_acl":"ISCSI ACL added",
    "remove_iscsi_acl": "ISCSI ACL removed",
    "change_service_status":"Service status modified",
    "set_interface_state":"Network interface state modified",
    "edit_interface_address": "Network interface address modified",
    "create_bond":"Network interface bond created",
    "remove_bond":"Network interface bond removed",
    "edit_hostname":"System hostname modified",
    "set_dns_nameservers":"DNS nameservers modified",
    "modify_admin_password":"Administrator password modified",
    "create_zfs_pool":"ZFS pool created",
    "scrub_zfs_pool":"ZFS pool scrub initiated",
    "delete_zfs_pool":"ZFS pool removed",
    "edit_zfs_slog":"ZFS pool write cache modified",
    "remove_zfs_slog":"ZFS pool write cache removed",
    "edit_zfs_dataset":"ZFS dataset modified",
    "delete_zfs_dataset":"ZFS dataset removed",
    "create_zfs_zvol":"ZFS block device volume created",
    "delete_zfs_zvol":"ZFS block device volume removed",
    "create_zfs_dataset":"ZFS dataset created",
    "create_zfs_snapshot":"ZFS snapshot created",
    "delete_zfs_snapshot":"ZFS snapshot removed",
    "rollback_zfs_snapshot":"ZFS snapshot rolled back",
    "replace_disk_offline_disk":"Disk replacement - old disk offlined",
    "replace_disk_replaced_disk":"Disk replacement - disk replaced successfully",
    "rename_zfs_snapshot":"ZFS snapshot renamed"
    }

    platform, err = common.get_platform()
    if err:
      raise Exception(err)
    if not platform:
      raise Exception('Could not determine the platform')
    if platform not in ['unicell', 'gridcell']:
      raise Exception('Unknown platform')
    if platform == 'unicell':
      action_dict = unicell_action_dict
    else:
      action_dict = gridcell_action_dict

    m = re.match("([\d]+)[\s]+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)[\s]+([a-zA-Z_]+)[\s]+(.*)", str)
    d = None
    if m:
      t = m.groups()
      if len(t) == 4:
        d = {}
        d["time"] = time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime(int(t[0])))
        d["ip"] = t[1]
        d["action_str"] = t[3]
        if t[2] in action_dict:
          d["action"] = action_dict[t[2]]
        else:
          d["action"] = "Unknown"
  
  except Exception, e:
    return None, 'Error parsing audit log line : %s'%str(e)
  else:
    return d, None


def rotate_audit_trail():
  #Rotate the audit trail log file
  try:
    audit_dir, err = common.get_audit_dir()
    if err:
      raise Exception(err)
    ret, err = logs.rotate_log(audit_dir, "audit.log", None)
    if err:
      raise Exception(err)
  except Exception, e:
    return False, 'Error rotating audit trail : %s'%str(e)
  else:
    return True, None

def get_log_file_list():
  #Get a list of dicts with each dict having a date and all the rotated log files for that date

  nl = None
  try:
    audit_dir, err = common.get_audit_dir()
    if err:
      raise Exception(err)
    l, err = logs.get_log_file_list(audit_dir, "audit.log")
    if err:
      raise Exception(err)
    nl, err = logs.generate_display_log_file_list(l, "audit.log")
    if err:
      raise Exception(err)
  except Exception, e:
    return None, 'Error rotating audit trail : %s'%str(e)
  else:
    return nl, None


if __name__ == "__main__":
  print audit("cralkjlkjte_vlume", "ldkfladkjldakf Created volume test1", "192.2.34.123")
#  with open("./audit_trail/audit.log") as f:
#    for line in f:
#      print _parse_audit_line(line)
