from integralstor_common import command
import re, os, pprint

def rescan_drives():
  try :
    for dirname, dirs, files in os.walk('/sys/class/scsi_host/'):
      #print dirs
      for dir in dirs:
        #print '/sys/class/scsi_host/%s/scan'%dir
        with open('/sys/class/scsi_host/%s/scan'%dir, 'w') as f:
          #print '/sys/class/scsi_host/%s/scan'%dir
          f.write('- - -')
          f.close()
  except Exception, e:
    return False, "Error rescanning drives : %s"%str(e)
  else:
    return True, None

def get_all_disks_by_name():

  #Returns a list of all disks by name (sda/sbd, etc) in the sytem
  dl = []
  try:
    cmd_dl = "/usr/sbin/smartctl --scan"
    (ret, rc), err = command.execute_with_rc(cmd_dl)
    if err:
      raise Exception(err)
    disk_list, err = command.get_output_list(ret)
    if err:
      raise Exception(err)
    
    if ret:
      # Regex to capture "/dev/sdX"
      reg_exp_dl = re.compile("(/dev/[a-z]+)")

      for line in disk_list:
        d = {}
        if reg_exp_dl.search(line):
          result_dl = re.search(r'/dev/sd[a-z]', line)
          result_dl1 = re.search(r'/dev/(sd[a-z])', line)
          if result_dl:
            d["full_path"] = result_dl.group()
            dname = result_dl1.groups()[0]
            r = re.match('^sd[a-z]', dname)
            d["name"] = r.group()
            dl.append(d)
    #print "disk list info: ", dl
  except Exception, e:
    return None, "Error retrieving disks by name : %s"%str(e)
  else:
    return dl, None

def get_disk_ids(disk_name):
  #Returns the /dev/disk/by-id entries corresponding to the name supplied
  ids = []
  try:
    supplied_path = '/dev/%s'%disk_name
    for (dirpath, dirnames, filenames) in os.walk('/dev/disk/by-id'):
      for file in filenames:
        real_path = os.path.realpath('%s/%s'%(dirpath, file))
        if real_path == supplied_path:
          ids.append(file)
  except Exception, e:
    return None, "Error retrieving disk ID : %s"%str(e)
  else:
    return ids, None

def get_disk_scsi_info(disk_name):
  #Returns the /dev/disk/by-path entries corresponding to the name supplied
  scsi_info_list = []
  try:
    scsi_info = None
    supplied_path = '/dev/%s'%disk_name
    for (dirpath, dirnames, filenames) in os.walk('/sys/bus/scsi/drivers/sd'):
      for dir in dirnames:
        for (dpath, dnames, fnames) in os.walk('%s/%s/block'%(dirpath, dir)):
          for d in dnames:
            if d == disk_name:
              scsi_info = dir
              break
          if scsi_info:
            break
        if scsi_info:
          break
      if scsi_info:
        break
    if scsi_info:
      l = scsi_info.split(':')
      if l:
        for comp in l:
          scsi_info_list.append(int(comp))
  except Exception, e:
    return None, "Error retrieving disk SCSI info : %s"%str(e)
  else:
    return scsi_info_list, None

def get_disk_uuids(disk_name):
  #Returns the /dev/disk/by-uuid entries corresponding to the name supplied
  uuids = []
  try:
    supplied_path = '/dev/%s'%disk_name
    for (dirpath, dirnames, filenames) in os.walk('/dev/disk/by-uuid'):
      for file in filenames:
        real_path = os.path.realpath('%s/%s'%(dirpath, file))
        if real_path == supplied_path:
          uuids.append(file)
  except Exception, e:
    return None, "Error retrieving disk UUID : %s"%str(e)
  else:
    return uuids, None

def is_rotational(disk_name):
  #Given a disk name like sda, returns true if its a rotational device
  rotational = True
  try:
    if not disk_name:
      raise Exception("Disk name not specified. Could not determine rotational status")
    if os.path.isfile('/sys/block/%s/queue/rotational'%disk_name):
      with open ('/sys/block/%s/queue/rotational'%disk_name) as f:
        str = f.read()
        if str.strip() == "1":
          rotational = True
        else:
          rotational = False
    else:
      raise Exception("Configuration error. Rotational parameter not set for disk %s"%disk_name)
  except Exception, e:
    return None, "Error checking disk rotational status : %s"%str(e)
  else:
    return rotational, None

def get_capacity(name):
  #Given the name of a disk (like sda) OR a partition (like sda2), returns the capacity
  capacity = None
  try:
    # Get the storage capacity 
    st1 = os.popen("/sbin/fdisk -l /dev/%s | grep Disk"%name)
    str2 = st1.read()
    disk_capacity = re.search(r'\s[0-9]+[\.0-9]*\s[a-zA-Z]+',str2)
    if disk_capacity:
      capacity = (disk_capacity.group()).strip()
    else:
      capacity = -1
  except Exception, e:
    return None, "Error getting disk capacity : %s"%str(e)
  else:
    return capacity, None

def get_partitions(disk_name):
  #Given a disk name like sda, returns all the partitions info like sda1, sda2, etc
  l = []
  try:
    if not disk_name:
      return None, "No disk name specified so cannot retrieve partitions"
    supplied_path = '/dev/%s'%disk_name
    id_list = []
    for (dirpath, dirnames, filenames) in os.walk('/dev/disk/by-id'):
      id_list = filenames
      break
    for id1 in id_list:
      if not id1.startswith('scsi'):
        continue
      name = os.path.split(os.path.normpath(os.path.realpath('/dev/disk/by-id/%s'%id1)))[1]
      if disk_name not in name:
        continue
      if 'part' not in id1:
        continue
      d = {}
      d['name'] = name
      capacity, err = get_capacity(name)
      if err:
        raise Exception(err)
      if capacity:
        d["capacity"] = capacity
      l.append(d)
  except Exception, e:
    return None, "Error retrieving partitions : %s"%str(e)
  else:
    return l, None

def get_serial_number(disk_name):
  serial_number = None
  try:
    ids, err = get_disk_ids(disk_name)
    if err:
      raise Exception(err)
    id1 = None
    if ids:
      for id1 in ids:
        if not id1.startswith('scsi'):
          continue
    if id1:
      parts = id1.split('_')      
      if len(parts) >= 3:
        serial_number = parts[2]

    if not serial_number:
      #Cant get it this way for some SAS drives so try smartctl
      cmd_disk = "/usr/sbin/smartctl -H -i /dev/%s"%disk_name
      dl_output = os.popen(cmd_disk).read()
      lines = re.split("\r?\n", dl_output)
  
      for line in lines:
        #In case of a SAS drive, status comes with a different string so ..
        res = re.match('Serial Number:[\s]*([\S]*)', line)
        if not res:
          #For SAS drives, we get a lower case number, *&^@*&^
          res = re.match('Serial number:[\s]*([\S]*)', line)
        if res:
          tup = res.groups()
          if tup:
            serial_number = tup[0]
  except Exception, e:
    return None, "Error retrieving serial number : %s"%str(e)
  else:
    return serial_number, None

def get_smart_status(disk_name):
  status = None
  try:
    cmd_disk = "/usr/sbin/smartctl -H -i /dev/%s"%disk_name
    dl_output = os.popen(cmd_disk).read()
    lines = re.split("\r?\n", dl_output)
    reobj2 = re.compile(".*self-assessment.*")

    for line in lines:
      #In case of a SAS drive, status comes with a different string so ..
      res = re.match('SMART Health Status: ([\w\W ]*)$', line)
      if res:
        tup = res.groups()
        if tup:
          status = tup[0]
      if not status:
        if reobj2.search(line):
          ent = re.search(r'\s[A-Z]+', line)
          status = (ent.group()).strip()
  except Exception, e:
    return None, "Error getting disk S.M.A.R.T status : %s"%str(e)
  else:
    return status, None

def get_rootfs_device():
  device = None
  try:
    cmd = r"df -P /"
    device_list, err = command.get_command_output(cmd)
    if err:
      raise Exception(err)
    
    if len(device_list) < 2:
      device = None
    else:
      device_list_str = device_list[len(device_list)-1]
      parts = device_list_str.split()
      if parts:
        device = parts[0]

  except Exception, e:
    return None, "Error getting root FS device: %s"%str(e)
  else:
    return device, None
def get_disk_info(disk_name):

  #Given a disk name like sda, get the disk info
  return_dict = {}
  try:
    return_dict['name'] = disk_name
    ids, err = get_disk_ids(disk_name)
    if err:
      raise Exception(err)
    if ids:
      for id in ids:
        if id.startswith('scsi'):
          return_dict['id'] = id
          break
    else:
      return_dict['id'] = None
    return_dict['path'] = '/dev/%s'%disk_name
    capacity, err = get_capacity(disk_name)
    if err:
      raise Exception(err)
    return_dict['capacity'] = capacity
    serial_number, err = get_serial_number(disk_name)
    if err:
      raise Exception(err)
    return_dict['serial_number'] = serial_number
    rotational, err = is_rotational(disk_name)
    if err:
      raise Exception(err)
    return_dict['rotational'] = rotational
    partitions, err = get_partitions(disk_name)
    if err:
      raise Exception(err)
    return_dict['partitions'] = partitions
    status, err = get_smart_status(disk_name)
    if err:
      raise Exception(err)
    return_dict['status'] = status
    scsi_info, err = get_disk_scsi_info(disk_name)
    if err:
      raise Exception(err)
    return_dict['scsi_info'] = scsi_info
  except Exception, e:
    return None, "Error getting disk information : %s"%str(e)
  else:
    return return_dict, None

def get_disk_info_all():
  #Returns a structured dict for every disk that is alive
  return_dict = {}
  try:
    disks, err = get_all_disks_by_name()
    if err:
      raise Exception(err)
    for disk_dict in disks:
      disk_info, err = get_disk_info(disk_dict['name'])
      if err:
        raise Exception(err)
      if disk_info and 'serial_number' in disk_info:
        return_dict[disk_info['serial_number']] = disk_info

    root_device, err = get_rootfs_device()
    if err:
      raise Exception(err)
    if root_device:
      found_boot = False
      for sn, disk in return_dict.items():
        if 'partitions' not in disk:
          continue
        for partition in disk['partitions']:
          if '/dev/%s'%partition['name'] == root_device:
            partition['root_partition'] = True
            disk['boot_device'] = True
            found_boot = True
            break
        if found_boot:
          break

  except Exception, e:
    return None, "Error getting complete disk information : %s"%str(e)
  else:
    return return_dict, None
'''
def get_serial_number_and_status(disk_name):
  #Given the name of a disk (like sda) returns the serial number
  d = {}
  serial_number = None
  status = None
  try:
    cmd_disk = "/usr/sbin/smartctl -H -i /dev/%s"%disk_name
    dl_output = os.popen(cmd_disk).read()
    lines = re.split("\r?\n", dl_output)
    reobj1 = re.compile("(.*Number:.*)")
    reobj2 = re.compile(".*self-assessment.*")

    for line in lines:
      #In case of a SAS drive, status comes with a different string so ..
      res = re.match('SMART Health Status: ([\w\W ]*)$', line)
      if res:
        tup = res.groups()
        if tup:
          status = tup[0]
      res = re.match('Serial Number:[\s]*([\S]*)', line)
      if not res:
        #For SAS drives, we get a lower case number, *&^@*&^
        res = re.match('Serial number:[\s]*([\S]*)', line)
      if res:
        tup = res.groups()
        if tup:
          serial_number = tup[0]
      if reobj2.search(line):
        ent = re.search(r'\s[A-Z]+', line)
        status = (ent.group()).strip()
      if reobj1.search(line):
        sn = re.search(r':\s+\S+', line)
        if sn:
          d["serial_number"] = sn.group().strip(": ")
  except Exception, e:
    return None, "Error getting disk serial number : %s"%str(e)
  else:
    d['status'] = status
    d['serial_number'] = serial_number
    return d, None

def _get_disk_info_list():
  #Returns a list of all disks with ID information
  dl = []
  try:
    for (dirpath, dirnames, filenames) in os.walk('/dev/disk/by-id'):
      for file in filenames:
        d = {}
        if not file.startswith('ata'):
          continue
        #print file
        #print "%s/%s"%(dirpath, file)
        #print os.readlink("%s/%s"%(dirpath, file))
        if os.path.islink("%s/%s"%(dirpath,file)):
          realpath = os.path.normpath(os.path.join(os.path.dirname("%s/%s"%(dirpath, file)), os.readlink("%s/%s"%(dirpath,file)) ) )
          d['path'] = realpath
          d["name"] = os.path.split(os.path.normpath(os.readlink("%s/%s"%(dirpath,file))))[1]
          d['id'] = file
          if "part" in file.lower():
            partition = True
          else:
            partition = False
          d["partition"] = partition
          dl.append(d)
          #realpath = os.path.realpath(os.readlink("%s/%s"%(dirpath,file)))
          #print realpath
  except Exception, e:
    return None, "Error retrieving disks by ID : %s"%str(e)
  else:
    return dl, None


def get_partitions_on_a_disk(disk_name, dl = None):
  #Given a disk name like sda, returns all the partitions info like sda1, sda2, etc
  l = []
  try:
    if not disk_name:
      return None, "No disk name specified so cannot retrieve partitions"
    if not dl:
      dl, err =  _get_disk_info_list()
      if err:
        raise Exception(err)
    if not dl:
      raise "Error retrieving partitions, could not read disk info "
    for d in dl:
      if disk_name in d["name"] and "part" in d["id"]:
        capacity, err = get_capacity(d["name"])
        if err:
          raise Exception(err)
        if capacity:
          d["capacity"] = capacity
        l.append(d)
  except Exception, e:
    return None, "Error retrieving partitions : %s"%str(e)
  else:
    return l, None

def _diskmap():
  disk_positions = []
  try:
    disknames = {}
    for file in os.listdir('/sys/bus/scsi/devices'):
      m = re.match("^\d", file)
      if m:
        str1 = '/sys/bus/scsi/devices/' + file + '/block'
        if os.path.isdir(str1):
          for disk in os.listdir(str1):
            print disk, ' - ', str1
            disknames[file.split(':')[0]] = disk

    print disknames
    #print sorted(disknames)
    for key in sorted(disknames):
      print key, disknames[key]
      td = {}
      str1 = '/sys/block/' + disknames[key] + '/queue/rotational'
      print 'a0'
      if not os.path.exists(str1):
        continue
      print 'a'
      fh = open(str1, "r")
      value = fh.read().strip()
      print 'b'
      if value != '0':
        #print sno
        #print "Port:%s,Disk:%s,SerialNo:%s" % (key,disknames[key],sno)
        #td["serial_number"] = sno
        print key
        td["scsi_port_number"] = int(key)
        td['name'] = disknames[key]
        disk_positions.append(td)
      print disk_positions
      fh.close()
  except Exception, e:
    return None, "Error retrieving disk positions : %s"%str(e)
  else:
    return disk_positions, None

'''

'''
def get_disk_info(disk_name, idl = None, diskmap = None):

  #Given a disk name like sda, get the disk info
  return_dict = {}
  try:
    diskmap = None
    if not diskmap:
      diskmap, err = _diskmap()
      if err:
        raise Exception(err)
    if diskmap:
      #print 'in'
      for d in diskmap:
        #print d
        if d['name'] == disk_name:
          return_dict['scsi_port'] = d['scsi_port_number']
    else:
      raise Exception("Error getting disk positions")
    if not idl:
      idl, err =  _get_disk_info_list()
      if err:
        raise Exception(err)
    if not idl:
      raise Exception('Error retrieving disk information')
    found = False
    for d in idl:
      if disk_name == d["name"]:
        found = True
        break
    if found:
      return_dict["id"] = d["id"]
      return_dict["name"] = d["name"]
      return_dict["path"] = d["path"]

    for diskposinfo in diskmap:
      #print pos, diskposinfo
      #print disk_status[diskposinfo["serial_number"]]
      if diskposinfo['name'] == disk_name:
        return_dict['position'] = diskposinfo['scsi_port_number'] + 1
    if "position" not in return_dict:
        return_dict['position'] = -1
    capacity, err = get_capacity(disk_name)
    if err:
      raise Exception(err)
    if capacity:
      return_dict['capacity'] = capacity
    tempd, err = get_serial_number_and_status(disk_name)
    if err:
      raise Exception(err)
    if tempd:
      return_dict['serial_number'] = tempd['serial_number']
      return_dict['status'] = tempd['status']
    rotational, err = is_rotational(disk_name)
    if err:
      raise Exception(err)
    if rotational is not None:
      return_dict['rotational'] = rotational
    partitions, err = get_partitions_on_a_disk(disk_name, idl)
    if err:
      raise Exception(err)
    if partitions:
      return_dict['partitions'] = partitions
  except Exception, e:
    return None, "Error getting disk information : %s"%str(e)
  else:
    return return_dict, None

  
def get_disk_info_all():
  #Returns a structured dict for every disk that is alive
  return_dict = {}
  try:
    diskmap, err = _diskmap()
    if err:
      raise Exception(err)
    if not diskmap:
      raise Exception("Could not retrieve disk positions.")
    print "diskmap - ", diskmap, err
    print
    dl, err =  _get_disk_info_list()
    if err:
      raise Exception(err)
    if not dl:
      raise Exception("Could not retrieve Disk information.")
    print "dil - ", diskmap, err
    print
    for d in dl:
      if "part" in d["id"]:
        continue
      di_dict, err = get_disk_info(d["name"], dl, diskmap)
      if err:
        raise Exception(err)
      if di_dict:
        return_dict[di_dict["serial_number"]] = di_dict
    root_device, err = get_rootfs_device()
    if err:
      raise Exception(err)
    if root_device:
      found_boot = False
      for sn, disk in return_dict.items():
        if 'partitions' not in disk:
          continue
        for partition in disk['partitions']:
          if partition['path'] == root_device:
            partition['root_partition'] = True
            disk['boot_device'] = True
            found_boot = True
            break
        if found_boot:
          break

  except Exception, e:
    return None, "Error getting complete disk information : %s"%str(e)
  else:
    return return_dict, None
'''




def main():
  pp = pprint.PrettyPrinter(indent=4)
  #d, err = get_all_disks_by_name()
  #d, err = get_disk_ids('sda')
  #d, err = get_disk_uuids('sde1')
  #print 'Disks by name : '
  #print get_disks_by_name()
  #print 'Disks by id : '
  #print  _get_disk_info_list()
  #print 'is rotational: '
  #print is_rotational('sde')
  #print get_capacity('sda')
  #print get_serial_number_and_status('sda')
  #print is_rotational('sdc')
  #print get_serial_number('sda')
  #print get_serial_number('sde')
  #print get_smart_status('sda')
  #print get_smart_status('sde')
  #print get_disk_scsi_info('sde')
  #print get_disk_scsi_info('sda')
  #print get_disk_scsi_info('sdb')

  #print 'Disk info: '
  #d, err = get_disk_info('sdc')
  #print err
  #pp.pprint(d)
  d, err = get_disk_info_all()
  print err
  pp.pprint(d)
  #print 'Disk partitions: '
  #print get_partitions('sde')
  #r, err = _diskmap()
  #print r, err
  #print get_rootfs_device()
  #rescan_drives()

if __name__ == '__main__':
  main()
