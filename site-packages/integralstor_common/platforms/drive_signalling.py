import serial

def signal_drives(drive_info_list, platform='ECHOSTREAM_DS_212'):
    # Given a list of dictionaries with SCSI bus details of all drives and corresponding actions, it will signal the drives for the DS-212 platform
    # Condition - this works on the bottom node which is wired to control the drive starting from the top left
    # Action shd be ON or OFF
    try:
        if not drive_info_list:
            raise Exception('Drive scsi details not specified')
        #if len(drive_info_list) != 6:
        #  raise Exception('Need information for 6 drives')
        for drive_info in drive_info_list:
            if len(drive_info['scsi_info']) < 4:
                raise Exception('Invalid Drive scsi details specified : %s'%scsi_info)
            if drive_info['action'] not in ['ON', 'OFF']:
                raise Exception('Unknow action specified for %s'%drive_info['scsi_info'])

        signal_string, err = generate_signal_string(drive_info_list)
        if err:
            raise Exception(err)
        ret, err = issue_serial_port_drive_signalling_command(signal_string)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error signalling drives : %s'%str(e)
    else:
        return True, None

def generate_signal_string(drive_info_list):
    signal_string = None
    try:
        slist = ['1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1']
        for drive_info in drive_info_list:
            drive_pos = drive_info['scsi_info'][2]
            action = drive_info['action']
            if action == 'OFF':
                slist[drive_pos] = '1'
            elif action == 'ON':
                slist[drive_pos] = '0'
        signal_string = ''.join(slist)

    except Exception, e:
        return None, 'Error generating signal string : %s'%str(e)
    else:
        return signal_string, None

def issue_serial_port_drive_signalling_command(signal_string):
    try:
        if len(signal_string) != 16:
            raise Exception('Invalid drive signal string length!')
        for c in signal_string:
            if c not in ['1', '0']:
                raise Exception('Invalid drive signal string content!')
        print 'signalling %s'%signal_string
        port_name = '/dev/ttyS0'
        ser = serial.Serial(
            port=port_name,
            baudrate=9600,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS
        )
        ser.flushInput()
        ser.flushOutput()
        print ser.write(signal_string)
        ser.flushInput()
        ser.flushOutput()
        #ser.close()
    except Exception, e:
        return False, 'Error generating signal string : %s'%str(e)
    else:
        return True, None

def main():
    l = [
        {'scsi_info':[0,0,0,0], 'action':'ON'},
      {'scsi_info':[0,0,1,0], 'action':'OFF'},
      {'scsi_info':[0,0,2,0], 'action':'OFF'},
      {'scsi_info':[0,0,3,0], 'action':'ON'},
      {'scsi_info':[0,0,4,0], 'action':'OFF'},
      {'scsi_info':[0,0,5,0], 'action':'OFF'}]
    print generate_signal_string(l)
    #print signal_drives(l)

if __name__ == '__main__':
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
