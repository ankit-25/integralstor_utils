
from integralstor_common import common
import time, os, tempfile, shutil, glob

"""
Returns to filename to which this one should be copied to
"""
def _get_rotate_file_name(dir, file_name):

  fn = None
  try:
    path  = os.path.normpath("%s/%s"%(dir, file_name))

    if not os.path.exists(path):
      raise Exception("Specified directory/file does not exist")

    t = time.localtime()
    i = 1
    done = False

    while not done:
      fn = "%s_%d"%(file_name, int(time.time()) )
      path  = os.path.normpath("%s/%s"%(dir, fn))
      if not os.path.exists(path):
        done = True
      else:
        i = i+1

  except Exception, e:
    #print e
    return None, 'Error getting rotated log file name : %s'%str(e)
  else:
    return fn, None

"""
  Given a directory and any file_name, copies out the current file to a rotated name and reinitialises the current file with the strings from initialize_list.
"""
def rotate_log(dir, file_name, initialize_list):
  #print dir,file_name,initialize_list
  try:
    fn, err = _get_rotate_file_name(dir, file_name)
    if err:
      raise Exception(err)

    f = tempfile.NamedTemporaryFile(dir=dir)
    if initialize_list:
      for line in initialize_list:
        f.write(line)
      f.flush()

    dest_path  = os.path.normpath("%s/%s"%(dir, file_name))
    ffn = os.path.normpath("%s/%s"%(dir, fn))
    #First backup orig file
    shutil.copy(dest_path, ffn)
    #Now reinitialize the file
    shutil.copy(f.name, dest_path)
    f.close()
  except Exception, e:
    return False, 'Error rotating log file : %s'%str(e)
  else:
    return True, None

"""
Get the list of filenames in the dir excluding file_name
"""
def get_log_file_list(dir, file_name):

  l = []
  try:
    path  = os.path.normpath("%s/%s"%(dir, file_name))
    list = os.listdir(dir)
    l = []
    if list:
      for f in list:
        if f == file_name:
          pass
        else:
          l.append(f)
    l.sort(reverse=True)
  except Exception, e:
    return None, 'Error getting log file list : %s'%str(e)
  else:
    return l, None


"""
Given a list of all files, generate a list of dicts - each dict will have the display date and a list of file names for that date
"""
def generate_display_log_file_list(l, file_name):

  nl = []
  try:
    if not l:
      return None, None
    temp_dict = None
    temp_list = None
    if l:
      date_dict = {}
      for f in l:
        dt = f[len("%s_"%file_name):]
        s = time.strftime("%d %B %Y", time.localtime(float(dt)))
        if s in date_dict:
          td = {}
          td["file_name"] = f
          td["time"] =  time.strftime("%I:%M %p", time.localtime(float(dt)))
          temp_list.append(td)
        else:
          date_dict[s] = f
          if temp_dict:
            nl.append(temp_dict)
          temp_dict = {}
          temp_dict["date"] = s
          temp_list = []
          temp_dict["files"] = temp_list
          td = {}
          td["file_name"] = f
          td["time"] =  time.strftime("%I:%M %p", time.localtime(float(dt)))
          temp_list.append(td)
      #Now append the last temp_dict
      nl.append(temp_dict)
  except Exception, e:
    return None, 'Error getting display log file list : %s'%str(e)
  else:
    return nl, None
 
def auto_rotate_logs():
  try:
    config,err = common.get_config_dir()
    if err:
      raise Exception(err)
    #  Takes the log dir inside the config/logs and the log file name and auto-rotates it.
    log_dict = {'audit':'audit.log','alerts':'alerts.log'}
    for key,value in log_dict.items():
      status,err = rotate_log(config+"/logs/"+key+"/",value,None) 
      if err:
        raise Exception(err)
  except Exception,e:
    return False,"Error rotating logs "+str(e)
  else:
    return True, None
  
def main():
  #rotate_log("/home/bkrram/Documents/software/fractal/gluster_admin/gluster_admin/devel/alerts", "alerts.log", ["----------"])
  #rotate_log("/home/bkrram/Documents/software/fractal/gluster_admin/gluster_admin/devel/audit_trail", "audit.log", None) 
  #print get_log_file_list("/home/bkrram/Documents/software/fractal/gluster_admin/gluster_admin/devel/audit_trail", "audit.log") 
  print auto_rotate_logs()

if __name__ == "__main__":
  main()
