
import time, os, sys, fcntl, os.path, re

from integralstor_common import file_processing, common, logs, mail, networking

def raise_alert(alert_url, msg):
  try:
    url_host, err = common.get_alerts_url_host()
    if err:
      raise Exception(err)
    url_component, err = common.get_alerts_url_component()
    if err:
      raise Exception(err)
    url = "http://%s/%s?msg=%s"%(url_host, url_component, urllib.quote_plus(msg))
    #print url
    ur = urllib2.urlopen(url)
    ur.close()
  except Exception, e:
    return False, 'Error raising alert : %s'%str(e)
  else:
    return True, None


def load_alerts(fname = None, last_n = 0):
  #Read the alerts file. If the last line does not havethe dash pattern then place it there so the alerts button can be updated accordingly
  alerts_list = []
  try:
    alerts_dir, err = common.get_alerts_dir()
    if err:
      raise Exception(err)
    if not fname:
      filename, err = _get_alerts_file_path()
      if err:
        raise Exception(err)
    else:
      filename = "%s/%s"%(alerts_dir, fname)

    match = None
    with open(filename, "r") as f:
      if last_n != 0:
        count = last_n
      last_line = None
      for line in file_processing.reversed_lines(f):
        if not last_line:
          last_line = line
        if re.match("----------", line):
          continue
        else:
          d = {}
          m = re.search("([0-9]+)\s([\w\W\s]*)", line)
          if m:
            d["time"] = time.strftime("%c", time.localtime(int(m.groups()[0])))
            d["message"] = m.groups()[1]
            alerts_list.append(d)
            if last_n != 0:
              count = count -1
              if count == 0:
                break
      if last_line:
        match = re.match("----------", last_line)
    if not match:
      with open(filename, "a") as f:
        fcntl.flock(f, fcntl.LOCK_EX)
        f.write("\n----------")
        fcntl.flock(f, fcntl.LOCK_UN)
        f.close()
  except Exception, e:
    return None, 'Error loading alerts : %s'%str(e)
  else:
    return alerts_list, None


def raise_alert(msg_list, subject=None, ):
  try:
    t = int(time.time())
    filename, err = _get_alerts_file_path()
    if err:
      raise Exception(err)
    with open(filename, "a") as f:
      fcntl.flock(f, fcntl.LOCK_EX)
      for msg in msg_list:
        f.write("\n%-13d %s\n"%(t, msg))
      fcntl.flock(f, fcntl.LOCK_UN)
      f.close()
    d, err = mail.load_email_settings()
    if err:
      raise Exception(err)
    if d:
      if d["email_alerts"]:
        ret, err = mail.send_mail(d["server"], d["port"], d["username"], d["pswd"], d["tls"], d["rcpt_list"], "Alerts from IntegralStor "+networking.get_hostname()[0], '\n'.join(msg_list))
        if err:
          with open(filename, "a") as f:
            fcntl.flock(f, fcntl.LOCK_EX)
            f.write("\n%-13d %s\n"%(t, "Error sending email alert %s"%err))
            fcntl.flock(f, fcntl.LOCK_UN)
            f.close()
          raise Exception(err)
  except Exception, e:
    print "Error raising alert : %s"%str(e)
    with open(filename, "a") as f:
      fcntl.flock(f, fcntl.LOCK_EX)
      f.write("\n%-13d %s\n"%(t, "Error raising alert : %s"%str(e)))
      fcntl.flock(f, fcntl.LOCK_UN)
      f.close()

'''
def raise_quota_alert(msg_list):
  try:
    t = int(time.time())
    filename, err = _get_alerts_file_path()
    if err:
      raise Exception(err)
    with open(filename, "a") as f:
      fcntl.flock(f, fcntl.LOCK_EX)
      for msg in msg_list:
        f.write("\n%-13d %s\n"%(t, msg))
      fcntl.flock(f, fcntl.LOCK_UN)
      f.close()
    d, err = mail.load_email_settings()
    if err:
      raise Exception(err)
    if d:
      if d["email_quota"]:
        ret, err = mail.send_mail(d["server"], d["port"], d["username"], d["pswd"], d["tls"], d["rcpt_list"], "Quota Softlimit Exceeded in Integralstor GRIDCell", '\n'.join(msg_list))
        print 'ret is : ', ret, 'err is : ', err
        if err:
          raise Exception(err)
        if ret:
          with open(filename, "a") as f:
            fcntl.flock(f, fcntl.LOCK_EX)
            f.write("\n%-13d %s\n"%(t, "Error sending email alert %s"%ret))
            fcntl.flock(f, fcntl.LOCK_UN)
            f.close()
  except Exception, e:
    print "Error raising alert : %s"%str(e)
    with open(filename, "a") as f:
      fcntl.flock(f, fcntl.LOCK_EX)
      f.write("\n%-13d %s\n"%(t, "Error raising alert : %s"%str(e)))
      fcntl.flock(f, fcntl.LOCK_UN)
      f.close()

'''

def _get_alerts_file_path():
# Return the alerts file path. Create the alerts directory and file if it does not exist

  filename = None
  try:
    alerts_dir, err = common.get_alerts_dir()
    if err:
      raise Exception(err)
    if not os.path.exists(alerts_dir):
      os.mkdir(alerts_dir)

    filename = os.path.normpath("%s/alerts.log"%alerts_dir)
    if not os.path.exists(filename):
      mode = "w"
      #Create if it does not exist
      f = open(filename, mode)
      f.close()
    else:
      mode = "a"
  except Exception, e:
    return None, 'Error getting alerts file path : %s'%str(e)
  else:
    return filename, None


def new_alerts():

  ret = False
  try:
    filename, err = _get_alerts_file_path()
    if err:
      raise Exception(err)
    last_line = None
    with open(filename) as f:
      for line in f:
        last_line = line
    if not last_line:
      ret =  False
    elif re.match("----------", last_line):
      ret =  False
    else:
      ret =  True
  except Exception, e:
    return False, 'Error checking for new alerts : %s'%str(e)
  else:
    return ret, None


def rotate_alerts():
  #Rotate the alerts log file

  try:
    alerts_dir, err = common.get_alerts_dir()
    if err:
      raise Exception(err)
    ret, err = logs.rotate_log(alerts_dir, "alerts.log", ["----------"])
    if err:
      raise Exception(err)
  except Exception, e:
    return False, 'Error rotating  alerts log: %s'%str(e)
  else:
    return True, None

def get_log_file_list():
  #Get a list of dicts with each dict having a date and all the rotated log files for that date
  nl = None
  try:
    alerts_dir, err = common.get_alerts_dir()
    if err:
      raise Exception(err)
    l, err = logs.get_log_file_list(alerts_dir, "alerts.log")
    if err:
      raise Exception(err)
    nl, err = logs.generate_display_log_file_list(l, "alerts.log")
    if err:
      raise Exception(err)
  except Exception, e:
    return None, 'Error getting  alerts log file list : %s'%str(e)
  else:
    return nl, None

