import sqlite3

"""
Takes db path, table name, key name(for the passed table name), key value (and status requirement)
Returns task description(with status if get_status is set to 'True') of the corresponding task_id from table
"""
def get_task_description(db_path, table_name, key_name, key_val, get_status = False):
  try:
    l = ""
    arg_check = db_path and key_name and table_name and key_val
    if not arg_check:
      raise Exception ("Insufficient arguments")
    query = "select * from %s where %s = %d;" %(table_name, key_name, key_val)
    #not using read_single_row(). If the table doesn't have 'key_name' as its primary key, multiple rows with same task_id  possible.
    rows, err = read_multiple_rows (db_path, query)
    if err:
      raise Exception (err)
    if rows:
      for row in rows:
        if get_status is True:
          l = "%s. Status: %s." %(row['description'], row['status'])
        else:
          l = "%s." %(row['description'])
    if l:
      return l, None
    elif l is None:
      return None, None
  except Exception, e:
    return None, str(e)
   
"""
Read and return a single row from the db
"""
def read_single_row(db_path, query):
  d = {}
  conn = None
  try :
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    cur.execute(query)
    r = cur.fetchone()
    if r and r.keys():
      d = {}
      for key in r.keys():
        d[key] = r[key]
  except Exception, e:
    return None, 'Error reading from single row from database : %s'%str(e)
  else:
    return d, None
  finally:
    if conn:
      conn.close()
  return d

"""
Read and return multiple rows from the db
"""
def read_multiple_rows(db_path, query):
  l = []
  conn = None
  try :
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    cur.execute(query)
    rows = cur.fetchall()
    if rows:
      for row in rows:
        d = {}
        for key in row.keys():
          d[key] = row[key]
        l.append(d)
  except Exception, e:
    return None, 'Error reading multiple rows from database : %s'%str(e)
  else:
    return l, None
  finally:
    if conn:
      conn.close()

"""
Execute a set of insert/update/delete commands into the db
"""
def execute_iud(db_path, command_list, get_rowid = False):
  #command_list is a list of commands to execute in a transaction. Each command can have just the command or command with parameters
  conn = None
  rowid = -1
  try :
    #print command_list
    #print db_path
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute('PRAGMA journal_mode=TRUNCATE')
    for command in command_list:
      #print command
      if len(command) > 1:
        #print command[0], command[1]
        cur.execute(command[0], command[1])
      else:
        cur.execute(command[0])
    if get_rowid:
      rowid = cur.lastrowid
    cur.close()
    conn.commit()
  except Exception, e:
    return -1, 'Error inserting/updating database : %s'%str(e)
  else:
    return rowid, None
  finally:
    if conn:
      conn.close()
